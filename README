
		Notes on building XFree86 for OpenBSD X hackers 


o Shadow trees
  ------------

Always use a shadow tree to build X, especially on multiple
architectures. 

Lets assume XF4 is in /source/XF4, and you want to setup the build
shadow tree in /obj/XF4 do:

       mkdir -p /obj/XF4
       cd /obj/XF4
       lndir /source/XF4

Don't forget to update the shadow tree each time something gets added
in /source/XF4. 

There a script to remove dead links from the shadow tree when stuff
gets removed from /source/XF4: xc/config/utils/cleanlinks.sh (to be
run from the top of the shadow tree). 

o Makefile targets 
  ----------------

There are 2 ways to build X in OpenBSD either from XF4 or from
XF4/xc. 

The Makefile in XF4 is added by OpenBSD to provide a set of high-level
targets compatibles with the rest of the OpenBSD build environment. 

all, compile: cleans the tree and restart a full compilation
install: installs programs and manual pages to ${DESTDIR}. DESTDIR
         defaults to /
release: installs programs and manual pages to ${DESTDIR} and builds a
         set of distribution tar balls in ${RELEASEDIR}. Both DESTDIR
         and RELEASEDIR should be set. Any existing X files will be
         removed from DESTDIR first. 
clean:   removes produced object files, but not Makefiles 
distclean: removes every produced file. 

Note that this Makefile has currently no support for ${SUDO}. You need
to start make as root for the install and release targets manually. 

If you start from the xc directory, you'll need to use the make
targets defined by X:

World: cleans the tree and starts a full build. This is the only safe
       way to start if the tree was not built before. 
Everything: regenerates all Makefiles and rebuild without cleaning
            (dependencies are supposed to be good enough, which is not
            always true; so if something goes wrong after a make
            Everything, try a make World) 
clean: removes produces files, but not Makefiles. Note the after a
       make clean, 'make includes ; make depend' are needed before a
       'make'. 
distclean: removes every produced file. a 'make World' from the xc
           directory is the only safe way to restart a build after
           that. 
Makefile:  rebuild the Makefile in the current directory
Makefiles: rebuild Makefiles in all sub-directories. (recursive)
includes:  rebuild files and links needed for the build (recursive)
depend:    generate make dependencies (recursive)
all:       rebuild things (default target, recursive)
install:   install programs (recursive, should be run as root)
install.man: install manual pages (recursive, should be run as root)

In xc/programs/Xserver, there's a special target 'load<Server>' to
just relink the specified X server. For instance to relink the 'XFree86'
server, use 'make loadXFree86', to relink the Xnest server use 'make
loadXnest' and so on...

o How to build something with debug information? 
  ----------------------------------------------

The /usr/X11R6/bin/makeg command calls make with proper arguments to
build object files and executables with -g. 
It's not reasonable to use it on the whole tree. It will take
gigabytes of disk space and memory. 

Use it in selected directories after a regular build by doing:

    make clean
    make includes
    make depend
    makeg

in the directories(s) in which you need debugging information. 

If you did that in a subdirectory of the Xserver, finish by relinking
the X server: 

    make loadXFree86 

in xc/programs/Xserver. 

o Where to set variables?
  -----------------------

Most imake configuration files set variables only if they were not
previously set in host.def.  So, when hacking on X, you can modify the
waste majority of imake's configuration variables in
xc/config/cf/host.def.

Only some of them require direct modification in xc/config/cf/OpenBSD.cf or
other files under xc/config/cf.

Once you're happy with a change, you can reflect it in the file where
the default value is set, or in OpenBSD.cf if the change is specific
to OpenBSD. 

xc/config/cf/README has an almost complete list of configuration
variables and rules for imake. 

o Building a X server only
  ------------------------

One of the most common configuration hacking is to build only a 
statically linked XFree86 server without spending time in all the rest. 

Use the following host.def file: 

---Cut here---
#define InstallEmptyHostDef

#define BuildServersOnly	YES

/* 
 * you may also restrict the drivers that are built by editing and 
 * uncommenting the line below 
 */
/* #define XF86CardDrivers		neomagic */

#define XF86INT10			NO
#define UsbMouseSupport			NO
#define DoLoadableServer		NO
#define XnestServer			NO
#define XVirtualFramebufferServer	NO
#define XprtServer 			NO
#define BuildPexExt			NO
#define BuildXIE			NO
#define BuildXIElib			NO
#define BuildGlxExt			NO
#define BuildGLXLibrary			NO
#define BuildGLULibrary         	NO
#define BuildRenderLibrary		NO
#define BuildLBX			NO
#define BuildType1			NO
#define BuildSpeedo			NO
#define BuildFreeType			NO
#define BuildXTT			NO
#define	BuildFonts			NO
---Cut here---

The host.def file is supposed to be in xc/config/cf during
build. There are  several ways to achieve that: 

- if you're using the Makefile in XF4 copy it to
  xc/programs/Xserver/hw/xfree86/etc/bindist/OpenBSD-xxxx, where xxx
  is the XFree86 name for your architecture. It will be copied into
  place in the first stages of 'make compile'
- if you're using the xc Makefile, you should put it directly into
  xc/config/cf in the shadow tree. This allows you to have several
  shadow trees with different host.def. 

o Partial builds
  --------------

Apart of the ServersOnly build described above, it's pretty hard to
build only parts of the tree, without having first built everything,
since many parts depend on each other, and recursive make cannot
handle this at all. 

Please be patient and (re)build X from the top of the tree as much as
possible. Trying to be smarter will considerably augment the risk of
things getting out of sync and make you loose time.

Whenever you want to rebuild something in a particular directory
without touching the rest, use the following sequence: 

make clean
make Makefile
make Makefiles
make includes
make depend
make

No, there is no built-in target to handle this. As mentioned above, a
particular X server can be re-linked by running

make load<Server>

in xc/programs/Xserver. 

o About  OpenBSD.cf
  -----------------

xc/config/cf/OpenBSD.cf holds most of the OpenBSD specific imake
configuration for OpenBSD. It has basically 2 parts: 

- a general section defining stuff for all OpenBSD architectures
- several architecture-dependent sections, ended by some defaults
  for all architectures. 

The general section defines things about the libc and kernel features,
as well as about the build environment. 

The architecture specific sections can be used to customize the X
server build and some of the above features that need special
treatments. 

Since host.def is read once before OpenBSD.cf, settings that can be
overridden in host.def are encapsulated in

  #ifndef HasFeature
  #  define HasFeature   YES or NO
  #endif 

constructions. If you need to override a setting that doesn't have this
protection, you will need to change OpenBSD.cf (Well, this is not
really required, but let's say it so for now). 

Note that all imake defines should have a value (YES/NO or something
else). Putting just

#define HasFeature

is equivalent to:

#define HasFeature NO

which is generally not what you want. 

o Other tricks abouts OpenBSD.cf
  ------------------------------

- Most of the server build configuration is controlled by xfree86.cf,
  which is included last in most architecture dependent
  sections. Before including this file, variables are set to OpenBSD
  specific values to control its actions. 
  Some old servers still use xf86.rules or even no external file to
  configure their X server. I'd recommend that they switch to the use of
  xfree86.cf. 

- Building the libraries is handled on OpenBSD 2.9 and later by
  OpenBSDLib.rules. This file has a set of rules that apply to both
  a.out and ELF libraries and don't suffer from common mistakes made
  on ELF architectures by other systems. 

o What to do when make detects an error in a generated Makefile?
  --------------------------------------------------------------

A common problem that arises when hacking imake configuration files is
that an imake can generate incorrect Makefiles, leadings to errors in
'make'. The easiest to recover is to fix the problem in the Imakefile
or in the files in xc/config/cf/ and to re-generate the faulty
Makefile with:

    make -f Makefile.bak Makefile

But this will not always work, especially if Makefile.bak is bad too. 

*Don't* use just 'xmkmf' to generate the Makefiles in the X
tree. xmkmf uses the installed X from /usr/X11R6 instead of the
in-tree files. You should pass 2 arguments to xmkmf: the relative path
from the current dir to the top of the source (i.e. the xc directory)
and the relative path from the top to the current directory. 

For instance, to rebuild the Makefile in xc/programs/Xserver if you've
lost both Makefile and Makefile.bak, use

    xmkmf ../.. programs/Xserver


o A small explanation on how imake works
  --------------------------------------

Most of this is taken more or less verbatim from the imake(1) manual
page. Please read it for more details. 

Imake takes an Imakefile as input and produces a Makefile, with the
help of configuration files.  It is really just a wrapper to call the
C preprocessor on the Imakefile with the correct option. But imake
itself is generally not called directly either. It's called by the way
of the 'xmkmf' script or from the rules in a (I)makefile. 

imake starts by generating a file containing three lines:

    #define IMAKE_TEMPLATE "Imake.tmpl"
    #define INCLUDE_IMAKEFILE <Imakefile>
    #include IMAKE_TEMPLATE

and calls cpp on it, passing all -D and -I options from imake to cpp. 
Imake.tmpl is the template Makefile and it will include all other
needed configuration files. 

In imake configuration files, you'll find two kind of things:
definition of cpp macros and actual make variable definitions or
rules. 

This is the actual tree of included files, in order for OpenBSD: 

Imake.tmpl 
  Imake.cf
  site.def
    host.def
    xf86site.def
  OpenBSD.cf
    xfree86.cf
      xf86.rules
    OpenBSDLib.rules
  site.def
    host.def
  Imake.rules
  X11.rules
  X11.tmpl
  Imakefile
    Threads.tmpl  
    Libray.tmpl
    Server.tmpl
      xf86.tmpl
    ServerLib.tmpl

Note that host.def is included twice, before and after OpenBSD.cf. The
first time 'BeforeVendorCf' is YES and the second time 'AfterVendorCf'
is YES. 

The Imakefile can include other configuration files. Imakefiles
building a library will include Library.tmpl. Imakefiles building
server parts will include either Server.tmpl or ServerLib.tmpl.  An
Imakefile to build a regular program doesn't normally need to include
anything else.

o Writing Imakefiles
  ------------------

Imakefiles are very close in philosophy to BSD make Makefiles. You
only need to specify source and object files in the Imakefile and
the rest of the Makefile will be added from the configuration files by
imake. 

It's better to use one directory per program or library to build. It
will make Imakefiles simplerr to write. 

If the application has only one souce file, the Imakefile can be real
simple. The SimpleProgramTarget() macro takes care of everything. You
just need to specifly libraries and library dependencies with the
DEPLIBS and LOCAL_LIBRARIES make variables. This is for instance the
Imafile for xev:

---Cut here---
        DEPLIBS = $(DEPXONLYLIB)
LOCAL_LIBRARIES = $(XONLYLIB)

SimpleProgramTarget(xev)
---Cut Here---

For more complex programs, define SRCS and OBJS to the list of source
and object files, and use the ComplexProgramTarget() macro to specify
the name of the executable and manual page to install. See
xc/programs/xlogo/Imakefile for an example.

The following make variables alter the behaviuour of the compilation
rules: 

DEFINES holds extra -D and -U options to pass to CPP 
INCLUDES holds extra -I options to pass to CPP

DEPLIBS holds the list of library dependencies (ie libraries on which
the executable depends, in a form suitable for a dependencies line). 
LOCAL_LIBRARIES holds the list of libraries to link into the
executable. Under OpenBSD *don't* rely on implicit intra-library
dependencies to omit libraries that are required by others. 

The following macros or make variables are useful to describe the most
commonly used X libraries:

$(DEPXONLYLIB), $(XONLYLIB): libX11 alone 
$(DEPXLIB), $(XLIB):	     libX11 and X extension lib
$(DEPXTOOLLIB), $(XTOOLLIB): libXt and its dependencies (libSM,
			     libICE) but without libX11. 
$(DEPXPMLIB), $(XPMLIB):     libXpm alone.

XawClientDepLibs, XawClientLibs:    libXaw and all its dependencies (libXmu,
				    libXt, libSM, libICE, libXpm, libX11,
				    libXext) 
XmuuClientDepLibs, XmuuClientLib:   libXmuu and all its dependencies
				    (libX11 and libXext)


To build a library, define the SRCS and OBJS make variables and
include <Library.tmpl>. The following macros control the produced
library: 

LibName	:	the name of the library
DoSharedLib:	build a shared lib?
SoRev:		shared lib version
LibHeaders:	install $(HEADERS) in /usr/X11R6/include ?
IncSubdir:	subdir of /usr/X11R6/incluce to install $(HEADERS) to. 

-- 
$Id: README,v 1.1 2001/10/25 18:59:37 matthieu Exp $
